//@version=4
strategy(shorttitle="BB + ADX", title="Bollinger Bands + ADX", overlay=true)

//TIMEFRAME
startDate = input(title="Start Date", type=input.integer,
     defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer,
     defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer,
     defval=2000, minval=1800, maxval=2100)

endDate = input(title="End Date", type=input.integer,
     defval=31, minval=1, maxval=31)
endMonth = input(title="End Month", type=input.integer,
     defval=12, minval=1, maxval=12)
endYear = input(title="End Year", type=input.integer,
     defval=2019, minval=1800, maxval=2100)
inDateRange = (time >= timestamp(syminfo.timezone, startYear,
         startMonth, startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0))
//CONSTS

length = input(20, minval=1)
src = input(close, title="Source")
mult = input(2.0, minval=0.001, maxval=50, title="StdDev")
basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev
offset = input(0, "Offset", type = input.integer, minval = -500, maxval = 500)
plot(basis, "Basis", color=#872323, offset = offset)
p1 = plot(upper, "Upper", color=color.teal, offset = offset)
p2 = plot(lower, "Lower", color=color.teal, offset = offset)
fill(p1, p2, title = "Background", color=#ffb3b3, transp=90)

//ADX
adxlen = input(14, title="ADX Smoothing")
dilen = input(14, title="DI Length")
dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	plus = fixnan(100 * rma(plusDM, len) / rma(tr, len))
	minus = fixnan(100 * rma(minusDM, len) / rma(tr, len))
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / ((plus + minus) == 0 ? 1 : (plus + minus)), adxlen)
	adxfinal = plus > minus ? -1*adx : adx
sig = adx(dilen, adxlen)
sigabs = abs(sig)


if (crossover(src, lower) and sigabs<25 and inDateRange)
	strategy.entry("BB-Long", strategy.long)
if (crossunder(src, upper) and sigabs<25 and inDateRange)
	strategy.entry("BB-Short", strategy.short)
strategy.close("BB-Long", when=cross(close, basis))
strategy.close("BB-Short", when=cross(close, basis))
